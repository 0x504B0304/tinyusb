name: Build

on: [pull_request, push, repository_dispatch]

jobs:
  # Unit testing with Ceedling
  unit-test:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Ruby
      uses: actions/setup-ruby@v1

    - name: Checkout TinyUSB
      uses: actions/checkout@v2

    - name: Unit Tests
      run: |
        # Install Ceedling
        gem install ceedling
        cd test
        ceedling test:all

  # build all example for each family
  build-family:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        family:
        - 'imxrt'
        - 'nrf'
        - 'rp2040'
        - 'samd21'
        - 'samd51'
        - 'stm32f4'
        - 'stm32f7'
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Setup Node.js
      uses: actions/setup-node@v1

    - name: Pre-Install Toolchain
      run: |
        # Add Toolchain URL to env
        echo >> $GITHUB_ENV ARM_GCC_URL=https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2

    - name: Cache Toolchain
      uses: actions/cache@v2
      id: cache-toolchain
      with:
        path: ~/cache/
        key: ${{ runner.os }}-21-01-26-${{ env.ARM_GCC_URL }}

    - name: Install Toolchain
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        # ARM GCC
        mkdir -p ~/cache/arm-gcc
        wget --progress=dot:mega $ARM_GCC_URL -O arm-gcc.tar.bz2
        tar -C ~/cache/arm-gcc -xaf arm-gcc.tar.bz2

    - name: Post-Install Toolchains
      run: |
        # ARM
        echo >> $GITHUB_PATH `echo ~/cache/arm-gcc/gcc-arm-none-eabi-*/bin`

    - name: Checkout TinyUSB
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Checkout Sub-Submodules
      run: |
        # some submodule has it own submodules that need to be fetched as well
        git submodule update --init --recursive hw/mcu/microchip
        git submodule update --init --recursive lib/FreeRTOS

    - name: Build
      run: python3 tools/build_family.py ${{ matrix.family }}

  # Build all no-family (opharned) boards
  build-board:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example:
        - 'device/audio_test'
        - 'device/board_test'
        - 'device/cdc_dual_ports'
        - 'device/cdc_msc'
        - 'device/cdc_msc_freertos'
        - 'device/dfu_rt'
        - 'device/hid_composite'
        - 'device/hid_composite_freertos'
        - 'device/hid_generic_inout'
        - 'device/hid_multiple_interface'
        - 'device/midi_test'
        - 'device/msc_dual_lun'
        - 'device/net_lwip_webserver'
        - 'device/uac2_headset'
        - 'device/usbtmc'
        - 'device/webusb_serial'
        - 'host/cdc_msc_hid'

    steps:
    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Setup Node.js
      uses: actions/setup-node@v1

    - name: Checkout TinyUSB
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Checkout Sub-Submodules
      run: |
        # some submodule has it own submodules that need to be fetched as well
        git submodule update --init --recursive hw/mcu/microchip
        git submodule update --init --recursive lib/FreeRTOS

    - name: Pre-Install Toolchain
      run: |
        # Add Toolchain URL to env
        echo >> $GITHUB_ENV ARM_GCC_URL=https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
        echo >> $GITHUB_ENV MSP430_GCC_URL=http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSPGCC/9_2_0_0/export/msp430-gcc-9.2.0.50_linux64.tar.bz2
        echo >> $GITHUB_ENV RISCV_GCC_URL=https://github.com/xpack-dev-tools/riscv-none-embed-gcc-xpack/releases/download/v10.1.0-1.1/xpack-riscv-none-embed-gcc-10.1.0-1.1-linux-x64.tar.gz

    - name: Cache Toolchain
      uses: actions/cache@v2
      id: cache-toolchain
      with:
        path: ~/cache/
        key: ${{ runner.os }}-21-01-26-${{ env.ARM_GCC_URL }}-${{ env.RISCV_GCC_URL }}-${{ env.MSP430_GCC_URL }}

    - name: Install Toolchain
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        # ARM GCC
        mkdir -p ~/cache/arm-gcc
        wget --progress=dot:mega $ARM_GCC_URL -O arm-gcc.tar.bz2
        tar -C ~/cache/arm-gcc -xaf arm-gcc.tar.bz2

        # MSP430 GCC
        mkdir -p ~/cache/msp430-gcc
        wget --progress=dot:mega $MSP430_GCC_URL -O msp430-gcc.tar.bz2
        tar -C ~/cache/msp430-gcc -xaf msp430-gcc.tar.bz2

        # RISC-V GCC
        mkdir -p ~/cache/riscv-gcc
        wget --progress=dot:mega $RISCV_GCC_URL -O riscv-gcc.tar.gz
        tar -C ~/cache/riscv-gcc -xaf riscv-gcc.tar.gz

    - name: Post-Install Toolchains
      run: |      
        ls ~/cache/*
        
        # ARM
        echo >> $GITHUB_PATH `echo ~/cache/arm-gcc/gcc-arm-none-eabi-*/bin`

        # MSP430
        echo >> $GITHUB_PATH `echo ~/cache/msp430-gcc/msp430-gcc-*/bin`
        
        # RISC-V
        echo >> $GITHUB_PATH `echo ~/cache/riscv-gcc/xpack-riscv-*/bin`

    - name: Build
      run: python3 tools/build_board.py ${{ matrix.example }}

  # Build ESP32S2
  build-esp32s2:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
        - 'espressif_kaluga_1'
        - 'espressif_saola_1'

    steps:
    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Pull ESP-IDF docker
      run: docker pull espressif/idf:latest

    - name: Checkout TinyUSB
      uses: actions/checkout@v2
      with:
        submodules: 'false'

    - name: Build
      run: docker run --rm -v $PWD:/project -w /project espressif/idf:latest python3 tools/build_esp32s2.py ${{ matrix.board }}
